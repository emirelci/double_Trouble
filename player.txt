import pygame
from settings import screen_height

class Player(pygame.sprite.Sprite):
    def __init__(self, x, y,screen):
        super().__init__()
        
        self.display_surface = screen
        self.sprites_attack = []
        self.sprites_attack_left = []
        self.sprites_idle = []
        self.sprites_dead = []
        self.sprites_walking = []
        self.sprites_walking_left = []        
        
        for num in range(0,4):
            self.sprites_attack.append(pygame.image.load(f'asset/warriorCharacter/Warrior_2/attack/sprite_attack{num}.png'))    
            self.sprites_attack_left.append(pygame.transform.flip(self.sprites_attack[num],True,False))    
        for num in range(0,5):
            self.sprites_idle.append(pygame.image.load(f'asset/warriorCharacter/Warrior_2/idle/sprite_idle{num}.png')) 
        for num in range(0,4):
            self.sprites_dead.append(pygame.image.load(f'asset/warriorCharacter/Warrior_2/dead/sprite_dead{num}.png'))                   
        for num in range(0,8):
            self.sprites_walking.append(pygame.image.load(f'asset/warriorCharacter/Warrior_2/walking/sprite_walking{num}.png'))  
            self.sprites_walking_left.append(pygame.transform.flip(self.sprites_walking[num], True, False))              
        
        self.sprites_dead_current = 0
        self.current_sprite = 0   
        self.sprite_walking_current = 0                          
        self.current_sprite_attack = 0        
        self.is_animating_attack = False                 
        
        self.image = self.sprites_idle[0]
        self.rect  = self.image.get_rect()
        self.direction = pygame.math.Vector2(0,0)
        self.speed = 8
        self.gravity = 0.8
        self.jump_speed = -16 
        self.rect.x = x
        self.rect.y = y        
        self.vel_y = 0
        self.jumped = False
        self.direction = 0
        self.rect.topleft = [x,y]
        

    def apply_gravity(self):
        self.direction.y += self.gravity
        self.rect.y += self.direction.y
            
    def animate(self):
        self.is_animating_attack = True    
    
    def update(self):                    
        dx = 0
        dy = 0   
        
        key = pygame.key.get_pressed() 
        
        if key[pygame.K_SPACE] and self.jumped == False:
               self.vel_y = -15
               self.jumped = True
            
        if key[pygame.K_SPACE] == False:            
            self.jumped = False
                        
        if key[pygame.K_a]:
                dx -= 5
                self.sprite_walking_current += 0.2       
                self.direction = -1  
            
        if key[pygame.K_d]:
            dx += 5
            self.sprite_walking_current += 0.2
            self.direction = 1
        
        if key[pygame.K_s] and self.direction == 1:
            self.animate()    
         
        if key[pygame.K_s] and self.direction == -1:
            self.animate()
            
        if key[pygame.K_a] == False and key[pygame.K_d] == False:
            self.direction = 0       
            self.sprite_walking_current = 0                        
            self.current_sprite += 0.2
            
        #add gravity
        self.vel_y += 1
        if self.vel_y > 10:
            self.vel_y = 10    
        dy += self.vel_y    
        
        #update player coordinates
        self.rect.x += dx
        self.rect.y += dy
        
        if self.rect.bottom > screen_height:
            self.rect.bottom = screen_height
            dy = 0    
                        
        self.display_surface.blit(self.image,self.rect)
        pygame.draw.rect(self.display_surface,(255,255,255),self.rect,2)
        
        #idle Animations      
        if self.current_sprite >= len(self.sprites_idle):
            self.current_sprite = 0
        self.image = self.sprites_idle[int(self.current_sprite)]  
        
        #walking Animations        
        if self.sprite_walking_current >= len(self.sprites_walking):
            self.sprite_walking_current = 0
        if self.direction == 1:
            self.image = self.sprites_walking[int(self.sprite_walking_current)]            
        if self.direction == -1:
            self.image = self.sprites_walking_left[int(self.sprite_walking_current)]
            
        
        #attack Animations
        if self.is_animating_attack == True:
            self.current_sprite_attack += 0.2
            
            if self.current_sprite_attack >= len(self.sprites_attack):
                self.current_sprite_attack = 0                
                self.is_animating_attack = False
            if self.direction == 1:
                self.image = self.sprites_attack[int(self.current_sprite_attack)]
            if self.direction == -1:
                self.image = self.sprites_attack_left[int(self.current_sprite_attack)]